package com.propertySearcher.Algorithm;

import java.util.List;
import java.util.Set;

import com.propertySearcher.property.Location;
import com.propertySearcher.property.Property;

public class Search implements ISearch{

	private int withinHowManyMiles = 10;
	
	@Override
	public List<Property> doSearch(Location preferredLocation, double minPrice, double maxPrice, int minBedrooms,
			int maxBedrooms, int minBathrooms, int maxBathrooms) {

		/* since we require, location within 10miles, we should be only searching on property which is less than 10miles from the preferredLocation. 
		I assume lat and longitude as x and y and on applying pythogoras theorem, we can get the set of locations where we need to search in. 
		Formula is: sqRoot(pow(abs(preferredLocation.min-searchLocationMin),2) + pow(abs(preferredLocation.max-searchLocationMax),2)) <= 10 miles
		// By using the above Mathematical formula, we need to find all feasible min and max of the searchLocations. 
		 * Let's say the found searchLocation set is Set<Location> searchLocations  
		*/
		Set<Location> searchLocations = getSearchLocationsToLookFor(preferredLocation);
		return null;
	}

	private Set<Location> getSearchLocationsToLookFor(Location preferredLocation) {
		
		return null;
	}
	
	

}
